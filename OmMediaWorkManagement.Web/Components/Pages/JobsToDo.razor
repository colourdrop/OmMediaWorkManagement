    @page "/JobsToDo"

    @inject NavigationManager Navigation
    @inject DialogService DialogService

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenDialog />

@* <div class="accordion-container">
    <div class="accordion">
        <input type="checkbox" id="accordion-1" class="accordion-input">
        <label for="accordion-1" class="accordion-header">Job Details</label>
        <div class="accordion-content">
            <EditForm Model="@newJobViewModel" OnValidSubmit="@(async () => await AddJob(newJobViewModel))" class="custom-form">
                <div class="form-group">
                    <div class="form-column">
                        <label for="clientName">Client Name</label>
                        <InputText id="clientName" @bind-Value="newJobViewModel.ClientName" class="custom-input" />
                    </div>

                    <div class="form-column">
                        <label for="companyName">Party Name</label>
                        <InputText id="companyName" @bind-Value="newJobViewModel.ComapnyName" class="custom-input" />
                    </div>
                </div>

                <div class="form-group">
                    <div class="form-column">
                        <label for="quantity">Quantity</label>
                        <InputNumber id="quantity" @bind-Value="newJobViewModel.Quantity" class="custom-input" />
                    </div>

                    <div class="form-column">
                        <label for="jobStatusType">Job Status  </label>
                        <InputNumber id="jobStatusType" @bind-Value="newJobViewModel.JobStatusType" class="custom-input" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="description">Description</label>
                    <InputText id="description" @bind-Value="newJobViewModel.Description" class="custom-input" />
                </div>

                <div class="form-group">
                    <label for="images">Upload Images</label>
                    <InputFile @bind-Value="newJobViewModel.Images" id="images" class="custom-input" OnChange="@HandleFileUpload" Multiple="true" />


                </div>

                <div class="button-group">
                    <button type="submit" class="custom-btn custom-btn-primary">Submit</button>
                    <button type="button" class="custom-btn custom-btn-secondary" @onclick="@(args => showDialog = false)">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

 *@
<RadzenAlert @bind-Visible="@showAlert" AlertStyle="@alertColor" ShowIcon="false" Variant="Variant.Flat" Shade="Shade.Lighter">
    @responseMessage
</RadzenAlert>
<div class="mt-5">
    <RadzenDropDownDataGrid Placeholder="Please search client" @bind-Value="selectedClientId" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@clients" TextProperty="Name" ValueProperty="Id" Name="DropDownDataGridBindValue" Change="OnClientSelected">
        <Columns>
            <RadzenDropDownDataGridColumn Property="Name" Title="Party Name">
                <Template Context="context">
                    @context.Name
                </Template>
            </RadzenDropDownDataGridColumn>
            <RadzenDropDownDataGridColumn Property="CompanyName" Title="Company Name">
                <Template Context="context">
                    @context.CompanyName
                </Template>
            </RadzenDropDownDataGridColumn>
            <RadzenDropDownDataGridColumn Property="MobileNumber" Title="Mobile Number">
                <Template Context="context">
                    @context.MobileNumber
                </Template>
            </RadzenDropDownDataGridColumn>
        </Columns>
    </RadzenDropDownDataGrid>
</div>
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
    @*         <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Add New todo" Disabled="@(editMode == DataGridEditMode.Single && todoToInsert.Count() > 0)" /> *@
    <div style="white-space:nowrap; margin-left: 20px ">Edit Mode:</div>
    <RadzenSelectBar @bind-Value="@editMode" TextProperty="Text" ValueProperty="Value" style="margin-right: 16px"
                     Data="@(Enum.GetValues(typeof(DataGridEditMode)).Cast<DataGridEditMode>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small"
                     Disabled="@(editMode == DataGridEditMode.Multiple && todoToInsert.Count() > 1)" />
    <RadzenButton Text="Generate PDF" Click="@(() => GeneratePdfFromDataGridAsync())" />
    <RadzenButton Text="Send Bulk Email" Click="@(() => SendBulkWorkEmailByClientId())" />
</RadzenStack>

<RadzenDataGrid @ref="todoGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true"
                PageSize="50" PageSizeOptions="new[] { 15, 25, 50,100 }" AllowSorting="true" EditMode="@editMode"
                Data="@filteredtodos" TItem="JobToDo" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px" CellClick="@OnCellClick"
                SelectionMode="DataGridSelectionMode.Multiple" AllowRowSelectOnRowClick="@allowRowSelectOnRowClick" @bind-Value=@selectedOmClientWork>
    <Columns>

        <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                Value="@(selectedOmClientWork == null || selectedOmClientWork?.Any() != true ? false : !jobToDo.All(i => selectedOmClientWork.Contains(i)) ? null : jobToDo.Any(i => selectedOmClientWork.Contains(i)))"
                                Change="@(args => selectedOmClientWork = args == true ? jobToDo.ToList() : null)" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(selectedOmClientWork != null && selectedOmClientWork.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { todoGrid.SelectRow(data); }}) />
            </Template>
        </RadzenDataGridColumn>



        @* <RadzenDataGridColumn Property="Id" Title="todo ID" Width="120px" Frozen="true" /> *@
        <RadzenDataGridColumn Title="S.No" Width="120px" Frozen="true">
            <Template Context="todo">
                @(filteredtodos.IndexOf(todo) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Title="PartyName" Width="240px">
            <EditTemplate Context="todo">
                <RadzenDropDown @bind-Value="todo.OmClientId" Data="@clients" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
            </EditTemplate>
            <Template Context="todo">
                @GetClientName(todo.OmClientId) / @GetClientCompanyName(todo.OmClientId)
            </Template>
        </RadzenDataGridColumn>

        @*   <RadzenDataGridColumn Property="CompanyName" Title="Party Name" Width="280px">
        <EditTemplate Context="todo">
        <RadzenTextBox @bind-Value="todo.CompanyName" Style="width:100%; display: block;" />
        </EditTemplate>
        </RadzenDataGridColumn>  *@

        <RadzenDataGridColumn Property="Description" Title="Description" Width="280px">
            <EditTemplate Context="todo">
                <RadzenTextBox @bind-Value="todo.Description" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="JobPostedDateTime" Title="Job Time" Width="200px">
            <Template Context="todo">
                @ConvertUtcToIst(todo.JobPostedDateTime)
            </Template>
            <EditTemplate Context="todo">
                <RadzenDatePicker @bind-Value="todo.JobPostedDateTime" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="Quantity" Title="Quantity" Width="200px">
            <Template Context="todo">
                @todo.Quantity
            </Template>
            <EditTemplate Context="todo">
                <RadzenNumeric @bind-Value="todo.Quantity" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Price" Title="Price" Width="200px">
            <Template Context="todo">
                @todo.Price
            </Template>
            <EditTemplate Context="todo">
                <RadzenNumeric @bind-Value="todo.Price" Style="width:100%" @onkeypress="(args => OnPriceKeyDown(args, todo))" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="TotalPayable" Title="TotalPayable" Width="200px">
            <Template Context="todo">
                @todo.TotalPayable
            </Template>
            <EditTemplate Context="todo">
                <RadzenNumeric @bind-Value="todo.TotalPayable" Style="width:100%" ReadOnly />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="PaidAmount" Title="PaidAmount" Width="200px">
            <Template Context="todo">
                @todo.PaidAmount
            </Template>
            <EditTemplate Context="todo">
                <RadzenNumeric @bind-Value="todo.PaidAmount" Style="width:100%" @onkeypress="(args => OnPaidAmountKeyDown(args,todo))" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="DueBalance" Title="DueBalance" Width="200px">
            <Template Context="todo">
                @todo.DueBalance
            </Template>
            <EditTemplate Context="todo">
                <RadzenNumeric @bind-Value="todo.DueBalance" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
        @*    <RadzenDataGridColumn Property="Total" Title="Total" Width="200px">
        <Template Context="todo">
        @todo.Total
        </Template>
        <EditTemplate Context="todo">
        <RadzenNumeric @bind-Value="todo.Total" Style="width:100%" ReadOnly />
        </EditTemplate>
        </RadzenDataGridColumn> *@

        @*     <RadzenDataGridColumn Property="JobStatusType" Title="Current Job Status" Width="200px">
        <Template Context="todo">
        @{
        var jobStatus = jobTypeStatusViewModels.FirstOrDefault(d => d.JobStatusType == todo.JobStatusType);
        var color = "";
        var backgroundColor = "";
        switch (jobStatus.JobStatusType)
        {
        //InProcess
        case 1:
        color = "#4F5AED";
        backgroundColor = "#F0F1FA";
        break;
        //Return
        case 2:
        color = "#5A6376";
        backgroundColor = "#E9EDF5";
        break;
        //Rejected
        case 3:
        color = "#D12953";
        backgroundColor = "#FAF0F3";
        break;
        //Hold
        case 4:
        color = "black";
        backgroundColor = "#E9EDF5";
        break;
        //Done
        case 5:
        color = "#14804A";
        backgroundColor = "#E1FCEF";
        break;
        default:
        color = "black";
        backgroundColor = "#E1FCEF";
        break;
        }
        }
        <span style="color: @color; background-color:@backgroundColor">@jobStatus.JobStatusName</span>
        </Template>
        <EditTemplate Context="todo">
        <RadzenDropDown TValue="int" @bind-Value="todo.JobStatusType" Data="@jobTypeStatusViewModels" TextProperty="JobStatusName" ValueProperty="Id" Style="width:100%" />
        </EditTemplate>
        </RadzenDataGridColumn> *@

        <RadzenDataGridColumn Property="Total" Title="JobPostedBy" Width="200px">
            <Template Context="todo">
                @todo.OmEmpName
            </Template>

        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Images" Width="300px">
            <Template Context="todo">
                @foreach (var image in todo.Images)
                {
                    <img src="@image" style="max-width: 100px; max-height: 100px; margin-right: 5px;" />
                }
            </Template>
            <EditTemplate Context="todo">
                <RadzenButton Text="View Images" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => ShowDialogWithCustomCssClasses(todo))" />
            </EditTemplate>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn Context="todo" Filterable="false" Sortable="false" Title="Action" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="todo">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(todo))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(todo))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="todo">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(todo))" aria-label="Save" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(todo))" aria-label="Cancel" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(todo))" aria-label="Delete" @onclick:stopPropagation="true">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
    <FooterTemplate>
        <tr class="footer-template">
            <td><strong>Total Payable Amount:</strong></td>
            <td class="total-payable">
                <strong class="cst-amount">@CalculateTotalTotal()</strong>
            </td>
            <td><span></span></td>
            <td><strong>Total Paid Amount:</strong></td>
            <td class="total-paid">
                <strong class="cst-amount">@CalculateTotalPaidAmount()</strong>
            </td>
            <td><strong>Total Due Amount:</strong></td>
            <td class="total-due">
                <strong class="cst-amount">@CalculateTotalDueAmount()</strong>
            </td>
        </tr>
    </FooterTemplate>

</RadzenDataGrid>

@* <div class="rz-p-12 rz-text-align-center">
    <RadzenButton Text="Dialog with custom CSS classes" ButtonStyle="ButtonStyle.Secondary"
                  Click=@ShowDialogWithCustomCssClasses />
</div> *@

@code {
    List<string> imagesToShow = new List<string>();

    async Task ShowDialogWithCustomCssClasses(JobToDo todo)
    {
        imagesToShow = todo.Images; // Assign images to imagesToShow
        await DialogService.OpenAsync("Images Dialog", ds =>
    @<div class="custom-dialog-wrapper-class">
        <div class="custom-dialog-class">
            <div style="display: flex; justify-content: center;">
                @foreach (var image in imagesToShow)
            {
                <div style="padding: 10px;">
                    <RadzenImage Path="@image" Style="width: 15rem; cursor: pointer;" AlternateText="Image Preview"
                                 @onclick="() => ShowImagePreview(image)" />
                </div>
            }
            </div>
        </div>
    </div>, new DialogOptions());
    }

    async Task ShowImagePreview(string imagePath)
    {
        // Implement logic to show full image preview using Radzen dialog or another method
        // Example: Navigate to a new page with the full-size image
        Navigation.NavigateTo($"imagepreview/{imagePath}");
    }


}
<script>
    function BlazorDownloadFile(filename, contentType, content) {
        // Create the URL
        const file = new File([content], filename, { type: contentType });
        const exportUrl = URL.createObjectURL(file);

        // Create the <a> element and click on it
        const a = document.createElement("a");
        document.body.appendChild(a);
        a.href = exportUrl;
        a.download = filename;
        a.target = "_self";
        a.click();

        // Delay the revocation to ensure the download is initiated
        setTimeout(() => {
            URL.revokeObjectURL(exportUrl);
            document.body.removeChild(a);
        }, 100); // 100ms delay, adjust if necessary
    }

</script>