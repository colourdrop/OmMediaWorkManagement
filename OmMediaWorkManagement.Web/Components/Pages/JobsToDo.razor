    @page "/JobsToDo" 
    @inject NavigationManager Navigation
    @rendermode InteractiveServer
    @inject DialogService DialogService
    <style>
        .rz-grid-table {
            width: unset;
        }
    </style>

    <RadzenDialog @rendermode="@RenderMode.InteractiveServer" />

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Add New todo" Disabled="@(editMode == DataGridEditMode.Single && todoToInsert.Count() > 0)" />
        <div style="white-space:nowrap; margin-left: 20px ">Edit Mode:</div>
        <RadzenSelectBar @bind-Value="@editMode" TextProperty="Text" ValueProperty="Value" style="margin-right: 16px"
                         Data="@(Enum.GetValues(typeof(DataGridEditMode)).Cast<DataGridEditMode>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small"
                         Disabled="@(editMode == DataGridEditMode.Multiple && todoToInsert.Count() > 1)" />
    </RadzenStack>

    <RadzenDataGrid @ref="todoGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@editMode"
                    Data="@todos" TItem="JobToDo" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
        <Columns>
            @* <RadzenDataGridColumn Property="Id" Title="todo ID" Width="120px" Frozen="true" /> *@
            <RadzenDataGridColumn Title="Serial Number" Width="120px" Frozen="true">
                <Template Context="todo">
                    @(todos.IndexOf(todo) + 1)
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="CompanyName" Title="Company Name" Width="280px">
                <EditTemplate Context="todo">
                    <RadzenTextBox @bind-Value="todo.CompanyName" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn> 
            <RadzenDataGridColumn Property="Description" Title="Job Description" Width="280px">
                <EditTemplate Context="todo">
                    <RadzenTextBox @bind-Value="todo.Description" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="JobPostedDateTime" Title="Job Posted Time" Width="200px">
                <Template Context="todo">
                    @String.Format("{0:g}", todo.JobPostedDateTime)
                </Template>
                <EditTemplate Context="todo">
                    <RadzenDatePicker @bind-Value="todo.JobPostedDateTime" Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>
 
            <RadzenDataGridColumn Property="Quantity" Title="Quantity" Width="200px">
                <Template Context="todo">
                    @todo.Quantity
                </Template>
                <EditTemplate Context="todo">
                    <RadzenNumeric @bind-Value="todo.Quantity" Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>

        

            <RadzenDataGridColumn Property="JobStatusType" Title="Current Job Status" Width="200px">
                <Template Context="todo">
                    @{
                        var jobStatus = jobTypeStatusViewModels.FirstOrDefault(d => d.JobStatusType == todo.JobStatusType);
                        var color = "";
                        var backgroundColor = "";
                        switch (jobStatus.JobStatusType)
                        {
                            //InProcess
                            case 1:
                                color = "#4F5AED";
                                backgroundColor = "#F0F1FA";
                                break;
                             //Return
                            case 2:
                                color = "#5A6376";
                                backgroundColor = "#E9EDF5";
                                break;
                                //Rejected
                            case 3:
                                color = "#D12953";
                                backgroundColor = "#FAF0F3";
                                break;
                                //Hold
                            case 4:
                                color = "black";
                                backgroundColor = "#E9EDF5";
                                break;
                                //Done
                            case 5:
                                color = "#14804A";
                                backgroundColor = "#E1FCEF";
                                break;
                            default:
                                color = "black";
                                backgroundColor = "#E1FCEF";
                                break;
                        }
                    }
                    <span style="color: @color; background-color:@backgroundColor">@jobStatus.JobStatusName</span>
                </Template>
                <EditTemplate Context="todo">
                    <RadzenDropDown TValue="int" @bind-Value="todo.JobStatusType" Data="@jobTypeStatusViewModels" TextProperty="JobStatusName" ValueProperty="Id" Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>


        <RadzenDataGridColumn Title="Images" Width="300px">
            <Template Context="todo">
                @foreach (var image in todo.Images)
                {
                    <img src="@image" style="max-width: 100px; max-height: 100px; margin-right: 5px;" />
                }
            </Template>
            <EditTemplate Context="todo">
                <RadzenButton Text="View Images" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => ShowDialogWithCustomCssClasses(todo))" />
            </EditTemplate>
        </RadzenDataGridColumn>


            <RadzenDataGridColumn Context="todo" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="todo">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(todo))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(todo))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="todo">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(todo))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(todo))" aria-label="Cancel">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(todo))" aria-label="Delete">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>

@* <div class="rz-p-12 rz-text-align-center">
    <RadzenButton Text="Dialog with custom CSS classes" ButtonStyle="ButtonStyle.Secondary"
                  Click=@ShowDialogWithCustomCssClasses />
</div> *@

@code {
    List<string> imagesToShow = new List<string>();

    async Task ShowDialogWithCustomCssClasses(JobToDo todo)
    {
        imagesToShow = todo.Images;
        await DialogService.OpenAsync("Images Dialog", ds =>
    @<div>
        @foreach (var image in imagesToShow)
    {
        <img src="@image" style="max-width: 100px; max-height: 100px; margin-right: 5px;" />
    }
    </div>, new DialogOptions()
          {
              CssClass = "custom-dialog-class",
              WrapperCssClass = "custom-dialog-wrapper-class"
          });
    }
}
