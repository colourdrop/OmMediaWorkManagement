@page "/WorkHistory"

@inject NavigationManager Navigation


<style>
    .rz-grid-table {
        width: unset;
    }
</style>


<RadzenDialog @rendermode="@RenderMode.InteractiveServer" />
<RadzenAlert @bind-Visible="@showAlert" AlertStyle="@alertColor" ShowIcon="false" Variant="Variant.Flat" Shade="Shade.Lighter">
    @responseMessage
</RadzenAlert>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">

    <RadzenDropDownDataGrid Placeholder="Please search client" @bind-Value="selectedClientId" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@clients" TextProperty="Name" ValueProperty="Id" Name="DropDownDataGridBindValue" Change="OnClientSelected">
        <Columns>
            <RadzenDropDownDataGridColumn Property="Name" Title="Party Name">
                <Template Context="context">
                    @context.Name
                </Template>
            </RadzenDropDownDataGridColumn>
            <RadzenDropDownDataGridColumn Property="CompanyName" Title="Company Name">
                <Template Context="context">
                    @context.CompanyName
                </Template>
            </RadzenDropDownDataGridColumn>
            <RadzenDropDownDataGridColumn Property="MobileNumber" Title="Mobile Number">
                <Template Context="context">
                    @context.MobileNumber
                </Template>
            </RadzenDropDownDataGridColumn>
        </Columns>
    </RadzenDropDownDataGrid>






    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
        <RadzenButton class="add-cst-btn" Icon="add_circle_outline" Text="Add Row" Click="@(() => InsertRow(1))" />

        <RadzenButton class="add-cst-btn" Icon="add_circle_outline" Text="Add 10 Row" Click="@(() => InsertRow(10))" />
        <RadzenButton class="add-cst-btn" Icon="add_circle_outline" Text="Add 25 Row" Click="@(() => InsertRow(25))" />
        <RadzenButton class="add-cst-btn" Icon="add_circle_outline" Text="Add 50 Row" Click="@(() => InsertRow(50))" />
        <RadzenButton class="add-cst-btn" Icon="save" Text="Save All Records" Click="@SaveAllRecords" />
        <RadzenButton class="add-cst-btn" Icon="save" Text="Clear Rows" Click="@ClearEmptyRows" />
        <RadzenButton Text="Generate PDF" Click="@(() => GeneratePdfFromDataGridAsync(filteredClientWorkHistory))" />

    </RadzenStack>
</RadzenStack>


<RadzenDataGrid @ref="clientsWorkGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true"
                PageSize="50" PageSizeOptions="new[] { 15, 25, 50,100 }" AllowSorting="true" EditMode="@editMode"
                Data="@filteredClientWorkHistory" TItem="OmClientWork" RowUpdate="@OnUpdateRow"
                RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset"
                ColumnWidth="180px" Height="400px" Width="100%" CellClick="@OnCellClick" 
                SelectionMode="DataGridSelectionMode.Multiple" AllowRowSelectOnRowClick="@allowRowSelectOnRowClick" @bind-Value=@selectedOmClientWork>
    <Columns>

        <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                Value="@(selectedOmClientWork == null || selectedOmClientWork?.Any() != true ? false : !clientWork.All(i => selectedOmClientWork.Contains(i)) ? null : clientWork.Any(i => selectedOmClientWork.Contains(i)))"
                                Change="@(args => selectedOmClientWork = args == true ? clientWork.ToList() : null)" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(selectedOmClientWork != null && selectedOmClientWork.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { clientsWorkGrid.SelectRow(data); }}) />
            </Template>
        </RadzenDataGridColumn>








        <RadzenDataGridColumn Title="S.N" Width="100px" Frozen="true">
            <Template Context="OmClientWork">
                @(filteredClientWorkHistory.IndexOf(OmClientWork) + 1)
            </Template>
        </RadzenDataGridColumn>
        <!-- Dropdown column for client selection -->
        <RadzenDataGridColumn Title="Party Name" Width="160px">
            <EditTemplate Context="work">
                <RadzenDropDown @bind-Value="work.OmClientId" Data="@clients" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
            </EditTemplate>
            <Template Context="work">
                @GetClientName(work.OmClientId)
            </Template>
        </RadzenDataGridColumn>

        <!-- Other columns for OmClientWork -->
        <RadzenDataGridColumn Property="WorkDate" Title="Date" Width="240px">
            <Template Context="work">
                @ConvertUtcToIst(work.WorkDate)
            </Template>
            <EditTemplate Context="work">
                <RadzenDatePicker @bind-Value="work.WorkDate" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="WorkDetails" Title="Details" Width="200px">
            <EditTemplate Context="work">
                <RadzenTextBox @bind-Value="work.WorkDetails" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="PrintCount" Title="Quantity" Width="200px">
            <EditTemplate Context="work">
                <RadzenNumeric @bind-Value="work.PrintCount" Style="width:100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Price" Title="Rate" Width="200px">
            <EditTemplate Context="work">
                <RadzenNumeric @bind-Value="work.Price" Style="width:100%;" @onkeypress="(args => OnPriceKeyDown(args, work))" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="TotalPayable" Title="TotalPayable" Width="200px">
            <EditTemplate Context="work">
                <RadzenNumeric @bind-Value="work.TotalPayable" Style="width:100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="PaidAmount" Title="PaidAmount" Width="200px">
            <EditTemplate Context="work">
                <RadzenNumeric @bind-Value="work.PaidAmount" Style="width:100%;" @onkeypress="(args => OnPaidAmountKeyDown(args,work))" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="DueBalance" Title="DueBalance" Width="200px">
            <EditTemplate Context="work">
                <RadzenNumeric @bind-Value="work.DueBalance" Style="width:100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        @*         <RadzenDataGridColumn Property="Total" Title="Total" Width="200px">
        <EditTemplate Context="work">
        <RadzenNumeric @bind-Value="work.Total" Style="width:100%;" ReadOnly />
        </EditTemplate>
        </RadzenDataGridColumn> *@


        <RadzenDataGridColumn Property="IsPaid" Title="Is Paid" Width="150px">
            <Template Context="work">
                @if (work.IsPaid)
                {
                    <RadzenButton Style="width:100%;" class="cst-btn-paid" Text="Paid" Click="@(args => UpdateIsPaidStatus(work, false))" />
                }
                else
                {
                    <RadzenButton Style="width:100%;" class="cst-btn-Unpaid" Text="Not Paid" Click="@(args => UpdateIsPaidStatus(work, true))" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="IsEmailSent" Title="Is Mail Sent" Width="150px">
            <Template Context="work">
                @if (work.IsEmailSent)
                {
                    <RadzenButton Style="width:100%;" class="cst-btn-paid" Text="Email Sent" Click="@(args => SendEmail(work ))" />
                }
                else
                {
                    <RadzenButton Style="width:100%;" class="cst-btn-Unpaid" Text="Email Not Sent" Click="@(args => SendEmail(work ))" />
                }
            </Template>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn Property="Remarks" Title="Remarks" Width="200px">
            <EditTemplate Context="work">
                <RadzenTextBox @bind-Value="work.Remarks" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="OmEmpName" Title="WorkAddedBY" Width="150px">
            <Template Context="work">
                <RadzenText Text="@work.UserName" Style="width:100%" ReadOnly />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="work" Filterable="false" Sortable="false" Title="Action" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="work">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(work))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(work))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="work">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(work))" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(work))" aria-label="Cancel" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(work))" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
    <FooterTemplate>
        <tr class="footer-template">
            <td><strong>Total Payable Amount:</strong></td>
            <td class="total-payable">
                <strong class="cst-amount">@CalculateTotalTotal()</strong>
            </td>
            <td><span></span></td>
            <td><strong>Total Paid Amount:</strong></td>
            <td class="total-paid">
                <strong class="cst-amount">@CalculateTotalPaidAmount()</strong>
            </td>
            <td><strong>Total Due Amount:</strong></td>
            <td class="total-due">
                <strong class="cst-amount">@CalculateTotalDueAmount()</strong>
            </td>
        </tr>
    </FooterTemplate>

</RadzenDataGrid>

<script>
    function BlazorDownloadFile(filename, contentType, content) {
        // Create the URL
        const file = new File([content], filename, { type: contentType });
        const exportUrl = URL.createObjectURL(file);

        // Create the <a> element and click on it
        const a = document.createElement("a");
        document.body.appendChild(a);
        a.href = exportUrl;
        a.download = filename;
        a.target = "_self";
        a.click();

        // We don't need to keep the object url, let's release the memory
        // On Safari it seems you need to comment this line... (please let me know if you know why)
        URL.revokeObjectURL(exportUrl);
    }
</script>